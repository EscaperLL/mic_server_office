// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: User.proto

package go_micro_service_mic_srv_office

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for IUserService service

func NewIUserServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for IUserService service

type IUserService interface {
	GetUsers(ctx context.Context, in *Users, opts ...client.CallOption) (*Reply, error)
	GetUserByID(ctx context.Context, in *UserIDs, opts ...client.CallOption) (*User, error)
	SetUser(ctx context.Context, in *User, opts ...client.CallOption) (*Reply, error)
	SetUsers(ctx context.Context, in *Users, opts ...client.CallOption) (*Reply, error)
	DelUser(ctx context.Context, in *UserIDs, opts ...client.CallOption) (*Reply, error)
}

type iUserService struct {
	c    client.Client
	name string
}

func NewIUserService(name string, c client.Client) IUserService {
	return &iUserService{
		c:    c,
		name: name,
	}
}

func (c *iUserService) GetUsers(ctx context.Context, in *Users, opts ...client.CallOption) (*Reply, error) {
	req := c.c.NewRequest(c.name, "IUserService.GetUsers", in)
	out := new(Reply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iUserService) GetUserByID(ctx context.Context, in *UserIDs, opts ...client.CallOption) (*User, error) {
	req := c.c.NewRequest(c.name, "IUserService.GetUserByID", in)
	out := new(User)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iUserService) SetUser(ctx context.Context, in *User, opts ...client.CallOption) (*Reply, error) {
	req := c.c.NewRequest(c.name, "IUserService.SetUser", in)
	out := new(Reply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iUserService) SetUsers(ctx context.Context, in *Users, opts ...client.CallOption) (*Reply, error) {
	req := c.c.NewRequest(c.name, "IUserService.SetUsers", in)
	out := new(Reply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iUserService) DelUser(ctx context.Context, in *UserIDs, opts ...client.CallOption) (*Reply, error) {
	req := c.c.NewRequest(c.name, "IUserService.DelUser", in)
	out := new(Reply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IUserService service

type IUserServiceHandler interface {
	GetUsers(context.Context, *Users, *Reply) error
	GetUserByID(context.Context, *UserIDs, *User) error
	SetUser(context.Context, *User, *Reply) error
	SetUsers(context.Context, *Users, *Reply) error
	DelUser(context.Context, *UserIDs, *Reply) error
}

func RegisterIUserServiceHandler(s server.Server, hdlr IUserServiceHandler, opts ...server.HandlerOption) error {
	type iUserService interface {
		GetUsers(ctx context.Context, in *Users, out *Reply) error
		GetUserByID(ctx context.Context, in *UserIDs, out *User) error
		SetUser(ctx context.Context, in *User, out *Reply) error
		SetUsers(ctx context.Context, in *Users, out *Reply) error
		DelUser(ctx context.Context, in *UserIDs, out *Reply) error
	}
	type IUserService struct {
		iUserService
	}
	h := &iUserServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&IUserService{h}, opts...))
}

type iUserServiceHandler struct {
	IUserServiceHandler
}

func (h *iUserServiceHandler) GetUsers(ctx context.Context, in *Users, out *Reply) error {
	return h.IUserServiceHandler.GetUsers(ctx, in, out)
}

func (h *iUserServiceHandler) GetUserByID(ctx context.Context, in *UserIDs, out *User) error {
	return h.IUserServiceHandler.GetUserByID(ctx, in, out)
}

func (h *iUserServiceHandler) SetUser(ctx context.Context, in *User, out *Reply) error {
	return h.IUserServiceHandler.SetUser(ctx, in, out)
}

func (h *iUserServiceHandler) SetUsers(ctx context.Context, in *Users, out *Reply) error {
	return h.IUserServiceHandler.SetUsers(ctx, in, out)
}

func (h *iUserServiceHandler) DelUser(ctx context.Context, in *UserIDs, out *Reply) error {
	return h.IUserServiceHandler.DelUser(ctx, in, out)
}
